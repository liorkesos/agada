<?php

/**
 * @file
 *   Allows users to organize containers using taxonomy terms.
 */


/**
 * Implements hook_field_widget_info().
 */
function taxonomy_container_field_widget_info() {
  return array(
    'taxonomy_container' => array(
      'label' => t('Select list (with groups)'),
      'field types' => array('taxonomy_term_reference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function taxonomy_container_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Abstract over the actual field columns, to allow different field types to
  // reuse those widgets.
  $value_key = key($field['columns']);

  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  $properties = array(
    'filter_xss' => FALSE,
    'strip_tags' => TRUE,
    'empty_option' => 'option_none',
    'optgroups' => TRUE,
  );

  if (!$multiple && $element['#required'] && !isset($items[0][$value_key])) {
    $properties['empty_option'] = 'option_select';
  }

  $options = array();
  // Optional widgets are prefixed with a blank value.
  if (!$instance['required']) {
    $options['_none'] = t('- None -');
  }

 // Compile the tree of options.
  foreach ($field['settings']['allowed_values'] as $tree) {
    if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
      if ($terms = taxonomy_get_tree($vocabulary->vid, $tree['parent'])) {
        foreach ($terms as $term) {
          if ($term->parents[0] == 0) {
            $parent_name = $term->name;
          }
          else {
            $options[$parent_name][$term->tid] = str_repeat('-', $term->depth) . $term->name;
          }
        }
      }
    }
  }

  _options_prepare_options($options, $properties);

  // Put current field values in shape.
  $default_value = _options_storage_to_form($items, $options, $value_key, $properties);

  $element += array(
    '#type' => 'select',
    '#default_value' => $default_value,
    // Do not display a 'multiple' select box if there is only one option.
    '#multiple' => $multiple && count($options) > 1,
    '#options' => $options,
  );
  $element += array(
    '#value_key' => $value_key,
    '#element_validate' => array('options_field_widget_validate'),
    '#properties' => $properties,
  );
  return $element;
}