<?php
// $Id: custom_agada.module,v 1.0 


/**
 * Implements hook_block_info().
 */
function custom_agada_block_info() {
  $blocks['agada_hello_user'] = array(
    'info' => t('agada_hello_user'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,   // Not worth caching.
  );
  $blocks['agada_user_links'] = array(
    'info' => t('agada_user_links'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,   // Not worth caching.
  );
  $blocks['agada_main_page_new'] = array(
	 'info' => t('agada main page new stories'), //The name that will appear in the block list.
    'cache' => DRUPAL_NO_CACHE,   // Not worth caching.
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function custom_agada_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
	 case 'agada_hello_user':	 
		 // Add logout & user account links or login link
		 if ($user->uid) {
			 $toolbar[] = '<span id="hello-user">'. t('Hello').' '. l(t('@username', array('@username' => format_username($user))), "user") .'</span>';
		 }
		 if (user_access('access content')) { // based on online box from user.module
        // Count users active within the defined period.
        $interval = REQUEST_TIME - variable_get('user_block_seconds_online', 900);

        // Perform database queries to gather online user lists. We use s.timestamp
        // rather than u.access because it is much faster.
        $authenticated_count = db_query("SELECT COUNT(DISTINCT s.uid) FROM {sessions} s WHERE s.timestamp >= :timestamp AND s.uid > 0", array(':timestamp' => $interval))->fetchField();

        //$toolbar[] = '<div class="agada-online">' . format_plural($authenticated_count, 'There is currently 1 user online.', 'There are currently @count users online.') . '</div>';

//		  $toolbar[] =  '<div id="online-user"><span class="online-title">'. t('Who is online') .'  </span><span class="online-details">' . format_plural($authenticated_count, 'There is currently 1 user online.', 'There are currently @count users online.') . '</span></div>';

       }
//		 $output = join(' | ',$toolbar);
//		 $block['content'] = $output;
		 return $block;
		case 'agada_user_links':	 
		  if ($user->uid) {
			 $links = array(
				'logout' => array(
				  'title' => t('Log out'),
				  'href' => 'user/logout',
				),
			 );
		  }
		  else {
			  $links = array(
				'login' => array(
				  'title' => t('Log in'),
				  'href' => 'user',
				),
				'register' => array(
				  'title' => t('Create new account'),
				   'href' => 'user/register',
		      ),
			 );
		  }
		
		 $block['content'] = theme("links",array('links'=>$links, 'attributes'=>  array('id' => 'agada-user-links'))) ;
		 return $block;
	 case 'agada_main_page_new':
		 //$results = custom_agada_get_new_stories_query();
		 $block['content'] = theme("get_new_stories") ;
		 return $block;
	 }
}

function get_stories_query($mode='new'){
	$subquery_1 = db_select('node', 'n');
	$subquery_1->addField('n', 'nid');
	$subquery_1->join('field_data_field_approved', 'ap', 'ap.entity_id=n.nid');
	$subquery_1->condition('ap.field_approved_value', 1, "=");
	$subquery_1->condition('n.status', 1, '=');
	$subquery_1->condition('n.type', 'agada_story', '=');
	$subquery_1->join('field_revision_field_type', 'ft', 'n.nid=ft.entity_id');
	$subquery_1->condition('ft.field_type_value', 1, '=');
	switch ($mode)  {
		case 'new':
				$subquery_1->orderBy('changed', 'DESC');
				break;
		case 'comment':
				$subquery_1->join('node_comment_statistics', 'ncs','ncs.nid= n.nid');
				$subquery_1->addField('ncs', 'comment_count');
				$subquery_1->orderBy('comment_count', 'DESC');
				break;
		case 'chidren_version':
				$subquery_1->join('field_revision_field_children_version', 'cv', 'n.nid=cv.entity_id');
				$subquery_1->orderBy('changed', 'DESC');
			   break;
		case 'viewed':
				$subquery_1->join('node_counter', 'nc','nc.nid= n.nid');
				$subquery_1->addField('nc', 'totalcount');
				$subquery_1->orderBy('totalcount', 'DESC');
				break;
	}
	$subquery_1->range(0,2);//LIMIT to 2 records



	$subquery_2 = db_select('node', 'n');
	$subquery_2->addField('n', 'nid');
	$subquery_2->condition('n.status', 1, '=');
   $subquery_2->condition('n.type', 'agada_story', '=');
	$subquery_2->join('field_data_field_approved', 'ap', 'ap.entity_id=n.nid');
	$subquery_2->condition('ap.field_approved_value', 1, "=");
	$subquery_2->join('field_revision_field_type', 'ft', 'n.nid=ft.entity_id');
	$subquery_2->condition('ft.field_type_value', 2, '=');
	switch ($mode)  {
		case 'new':
				$subquery_2->orderBy('changed', 'DESC');
				break;
		case 'comment':
				$subquery_2->join('node_comment_statistics', 'ncs','ncs.nid= n.nid');
				$subquery_2->addField('ncs', 'comment_count');
				$subquery_2->orderBy('comment_count', 'DESC');
				break;
		case 'chidren_version':
				$subquery_2->join('field_revision_field_children_version', 'cv', 'n.nid=cv.entity_id');
				$subquery_2->orderBy('changed', 'DESC');
			   break;
		case 'viewed':
				$subquery_2->join('node_counter', 'nc','nc.nid= n.nid');
				$subquery_2->addField('nc', 'totalcount');
				$subquery_2->orderBy('totalcount', 'DESC');
				break;
	}

	$subquery_2->range(0,4);//LIMIT to 4 records

   $simple_results = $subquery_1->execute();
	$simple_results_nodes=array();
	foreach ($simple_results as $item) {
		$field_output_arr=array();
		$node = node_load($item->nid);
		$node->frontpage_display_style = 1;
		$output =render(node_view($node));
		array_push($simple_results_nodes,$output);
	}

	$extended_results = $subquery_2->execute();
	$extended_results_nodes=array();
	$count=0;
	foreach ($extended_results as $item) {
		$node = node_load($item->nid);
		if ($count > 1 ) {
			$node->frontpage_display_style = 3;
		}
		else {
			$node->frontpage_display_style = 2;
		}
		$output =render(node_view($node));
		array_push($extended_results_nodes,$output);
		$count++;
	}


	return theme('stories_region_frontpage', array(
    'simple_stories' => $simple_results_nodes,
    'extended_stories' => $extended_results_nodes,
  ));

}


	/**
 * Implements hook_theme().
 */
function custom_agada_theme() {
  return array(
    'stories_region_frontpage' => array(
	   'template' => 'stories-region-frontpage',
	   'variables' => array('simple_stories' => array(), 'extended_stories' =>array()), 
	   'path' => drupal_get_path('module', 'custom_agada')
    ),
	 'node_frontpage' => array(
	   'template' => 'node-frontpage',
	   'variables' => array('node' => array(),'type'=>''), 
	   'path' => drupal_get_path('module', 'custom_agada')
    ),
  );
}

//function theme_adults_main_page($simple_results=array(),$extended_results=array())  {
//	 $output=<<<HTML
//		return $output;
//}


/**
 * custom_agada_get_israel_cities.
 */
function custom_agada_get_israel_cities() {
	 $cities=array();
	 $result = db_query('SELECT id,hebrew FROM cities');
    foreach ($result as $record) {
       $cities[$record->id] = $record->hebrew;
	 }
	return $cities;
}


/**
 * Implements hook_views_api().
 */
function custom_agada_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'custom_agada') . '/includes',
  );
}



/* 
* implemetation of hook_form_FORM_ID_alter
*
*/
function custom_agada_form_agada_story_node_form_alter(&$form, &$form_state, $form_id) {
	array_push($form['#attached']['css'] , 'sites/all/themes/agada/css/agada_story_node_form.css');
	$form['#attached']['js'] = array();
	array_push($form['#attached']['js'] , 'sites/all/themes/agada/js/agada_story_node_form.js');
}

/* 
* implemetation of hook_form_FORM_ID_alter
*
*/
function custom_agada_form_agada_children_story_node_form_alter(&$form, &$form_state, $form_id) {
	array_push($form['#attached']['css'] , 'sites/all/themes/agada/css/agada_story_node_form.css');
	$form['#attached']['js'] = array();
	array_push($form['#attached']['js'] , 'sites/all/themes/agada/js/agada_story_node_form.js');
}




/**
 * Implements hook_init().
 */

 
//function custom_agada_init() {
//
//	$space = spaces_get_space();
//	if ($space){
//
//	switch ($space->term->name) {
//      case 'kids':
//        $space->controllers->variable->set('site_frontpage', 'kids_frontpage');
//		  $space->controllers->variable->set('site_frontpage_path', 'kids_frontpage');
//        break;
//
//      case 'Red':
//        $space->controllers->variable->set('menu_primary_links_source', 'menu-primary-links-red');
//        $space->controllers->variable->set('site_name', 'hello');
//        $space->controllers->variable->set('theme_default', 'red');
//        break;
//    }
//	}
//	else {
//		  variable_set('site_frontpage', 'frontpage_temp');
//		  }
//
////	$space_data = variable_get('spaces_preset_taxonomy');
////	if ($space_data == 'children_space') {
////		variable_set('site_frontpage', 'kids_frontpage');
////	}
////	else {
////		 variable_set('site_frontpage', 'frontpage_temp');
////	}
//}


/**
 * Implements hook_menu().
 */
function custom_agada_menu() {
	  $items = array();

//	$user_access = user_access('View published content');
	$items['user_content'] = array(
	  'title' => 'user content',
	  'page callback' => 'menu_callback_agada',
      'access callback' => true,
	  'type' => MENU_LOCAL_TASK,
    );
	$items['all_kids_stories'] = array(
	  'title' => 'none',
	  'title callback' => false,
	  'page callback' => 'menu_callback_agada',
      'access callback' => true,
	  'type' => MENU_LOCAL_TASK,
    );
	$items['advanced_search'] = array(
		'title' => t('advanced search in stories'),
		'page callback' => 'menu_callback_advanced_search', 
		'access callback' => true,
		'type' => MENU_LOCAL_TASK,
	);
	$items['search_results'] = array(
		'title' => 'search results',
		'title callback' => false,
		'page callback' => 'get_search_results', 
		'access callback' => true,
		'type' => MENU_LOCAL_TASK,
	);
	$items['new_stories'] = array(
		'title' => 'none',
		'title callback' => false,
		'page callback' => 'get_stories_query', 
		'page arguments' => array('new'),
		'access callback' => true,
	);
	$items['commented_stories'] = array(
		'title' => 'none',
		'title callback' => false,
		'page callback' => 'get_stories_query', 
		'page arguments' => array('comment'),
		'access callback' => true,
	);
	$items['chidren_version_stories'] = array(
		'title' => 'none',
		'title callback' => false,
		'page callback' => 'get_stories_query', 
		'page arguments' => array('chidren_version'),
		'access callback' => true,
	);
	$items['viewed_stories'] = array(
		'title' => 'none',
		'title callback' => false,
		'page callback' => 'get_stories_query', 
		'page arguments' => array('viewed'),
		'access callback' => true,
	);
	$items['frontpage_temp'] = array(
		'title' => '',
		'title callback' => false,
	   'page callback' => 'menu_callback_agada',
      'access callback' => true,
	);
	
	
	return($items);
}

/**
* empty function for creating empty page associated with menu
*/
function menu_callback_agada() {
	return("");
}



function custom_agada_menu_link_alter(&$item) {
//	dpm($item['link_path']);
//  if (strpos($item['link_path'], 'admin') === 0 && empty($item['mlid'])) {
//    $item['hidden'] = 1;
//  }
}

/****************************************************************
*                    ADVANCED SEARCH FORM
****************************************************************/
/*
* return advanced search form
*/
function menu_callback_advanced_search() {
	drupal_set_title(t('advanced search in stories'));
	return(drupal_get_form('form_agada_advanced_search'));
}

/*
* define advanced search form
*/
function form_agada_advanced_search($form, &$form_state) {

	$PERSON			= array(359, 432, 677);
	$PARASHA		= array(884, 896, 906, 916, 925);
	$TIME_OF_YEAR	= array(739);
	$MIKRA_BOOK		= array(935);
	$THEME_TERM		= array(739, 758, 774, 782, 786, 797, 801, 802, 813, 814, 819, 824, 834);
	$MIDRASH_DICT   = 8;
	$AGADA_TAGS_DICT = 2;

	$kids_stories = 0;
	$space = spaces_get_space();
	if ($space){
		if ($space->term->name == 'kids') {
			$kids_stories = 1;
		}
	}

	$form['#attached']['js'] = array(
		drupal_get_path('theme', 'agada') . '/js/advanced_search_form.js',
	);
	$form['term']['theme'] = array(
		'#title' => t('theme_term'),
		'#type' => 'select',
		'#options' => agada_get_term_name($THEME_TERM)
	);
	$form['term']['person'] = array(
		'#title' => t('person'),
		'#type' => 'select',
		'#options' => agada_get_term_children($PERSON, t('all persons'), $AGADA_TAGS_DICT),
		'#default_value' => 0
	);
	$form['term']['parasha'] = array(
		'#title' => t('parasha'),
		'#type' => 'select',
		'#options' => agada_get_term_children($PARASHA, t('all parashot'), $AGADA_TAGS_DICT),
		'#default_value' => 0
	);
	$form['term']['time_of_year'] = array(
		'#title' => t('time_of_year'),
		'#type' => 'select',
		'#options' => agada_get_term_children($TIME_OF_YEAR, t('all time of year'), $AGADA_TAGS_DICT),
		'#default_value' => 0
	);
	$form['term']['mikra_book'] = array(
		'#title' => t('mikra_book'),
		'#type' => 'select',
		'#options' => agada_get_term_children($MIKRA_BOOK, t('all mikra books'), $AGADA_TAGS_DICT),
		'#default_value' => 0
	);

	$midrash_source_0_options = get_midrash_source_0();
	$selected = isset($form_state['values']['midrash_source_0']) ?	$form_state['values']['midrash_source_0'] : key($midrash_source_0_options);
	$form['midrash_source_0'] = array(
		'#title' => t('midrash_source'),
		'#type' => 'select',
		'#options' => $midrash_source_0_options,
		'#default_value' => $selected,
		'#ajax' => array(
			'callback' => 'midrash_source_0_callback',
			'wrapper' => 'midrash_source_1'
		),
		'#attributes' => array("onchange" => "resetMidrashLevels()")
		
	);

	$selected_source_1 = isset($form_state['values']['midrash_source_1']) ? $form_state['values']['midrash_source_1'] : "";
	$options = agada_get_term_children(array($selected), '', $MIDRASH_DICT);
	$display_1 = "block";
	if (count($options) == 0) {
		$display_1 = "none";
	}
	$form['midrash_source_1'] = array(
		'#type' => 'select',
		'#id' => 'midrash_source_1_select',
		'#prefix' => '<div id="midrash_source_1">',
		'#suffix' => '</div>',
		'#options' => agada_get_term_children(array($selected), '', $MIDRASH_DICT),
		'#default_value' => $selected_source_1,
		'#attributes' => array('style' => array("display:$display_1")),
		'#ajax' => array(
			'callback' => 'midrash_source_1_callback',
			'wrapper' => 'midrash_source_2'
		),
		
	);
	$options_2 = agada_get_term_children(array($selected_source_1), '', $MIDRASH_DICT);
	$display_2 = "block";
	if (count($options_2) == 0) {
		$display_2 = "none";
	}
	$form['midrash_source_2'] = array(
		'#type' => 'select',
		'#id' => 'midrash_source_2_select',
		'#prefix' => '<div id="midrash_source_2">',
		'#suffix' => '</div>',
		'#options' => agada_get_term_children(array($selected_source_1), '', $MIDRASH_DICT),
		'#attributes' => array('style' => array("display:$display_2"))
	);
	$form['writer'] = array(
		'#title' => t('writer'),
		'#type' => 'select',
		'#options' => get_writers(""),
		'#default_value' => 0,
		'#disabled' => $kids_stories,
		'#states' => array(
			'disabled' => array(
				':input[name="filter_adults"]' => array('checked' => FALSE),
			)
		)
	);
	$form['writer_kids'] = array(
		'#title' => t('kids writer'),
		'#type' => 'select',
		'#options' => get_writers("kids"),
		'#default_value' => 0,
		'#disabled' => 1 - $kids_stories,
		'#states' => array(
			'disabled' => array(
				':input[name="filter_kids"]' => array('checked' => FALSE),
			)
		)
	);
	$form['filter_all'] = array(
		'#title' => t('all stories'),
		'#type' => 'checkbox',
		'#default_value' => 0,
		'#attributes' => array("onchange" => "WritersOptions('all')")
	);
	$form['filter_kids'] = array(
		'#title' => t('kids stories'),
		'#type' => 'checkbox',
		'#default_value' => $kids_stories,
	);
	$form['filter_adults'] = array(
		'#title' => t('adults stories'),
		'#type' => 'checkbox',
		'#default_value' => 1-$kids_stories,
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('search'),
	);
	
	$form['#action'] = url('search_results');
	return($form);
}


/*
* 
*/
function get_search_results($parameters = array()) 
{
	drupal_set_title(t('advanced search results'));

	$ITEMS_PER_PAGE = 8;
	$selected_terms = array();

	$parameters = array();
	$query = db_select('taxonomy_index', 't')->extend('pagerDefault');
	$query->distinct();
	$query->addField('t', 'nid');

	$query->join('node', 'n', 'n.nid=t.nid');
	$query->addField('n', 'title');

	$query->join('field_data_body', 'b', 'n.nid=b.entity_id');
	$query->addField('b', 'body_value');

// conditions for terms
	$form_terms = array('theme', 'person', 'parasha', 'time_of_year', 'mikra_book', 'midrash_source_0', 'midrash_source_1', 'midrash_source_2');
	foreach ($form_terms as $value) {
		if (isset($_REQUEST[$value]) && $_REQUEST[$value] != 0) {
			$parameters[$value] = $_REQUEST[$value];
			$selected_terms[] = $_REQUEST[$value];
			$query->condition('t.tid', $_REQUEST[$value]);
		}
	}
// space condition
	if (isset($_REQUEST['filter_kids']) && !isset($_REQUEST['filter_adults'])) {
		$query->condition('n.type', 'agada_children_story', '=');
		$parameters['filter_kids'] = 1;
	}
	else if(!isset($_REQUEST['filter_kids']) && isset($_REQUEST['filter_adults'])) {
		$query->condition('n.type', 'agada_story', '=');
		$parameters['filter_adults'] = 1;
	}

// writer condotion
	if (isset($_REQUEST['writer']) && $_REQUEST['writer'] != 0) {
		$query->leftjoin('field_data_field_write_name', 'w', 'w.entity_id=n.nid');
		$parameters['writer'] = $_REQUEST['writer'];
	}
	if (isset($_REQUEST['writer_kids']) && $_REQUEST['writer_kids'] != 0) {
		$query->leftjoin('field_data_field_processor_name', 'p', 'p.entity_id=n.nid');
		$parameters['writer_kids'] = $_REQUEST['writer_kids'];
	}
	if (isset($parameters['writer']) and isset($parameters['writer_kids']))	{
		$query->condition(db_or()->condition('p.field_processor_name_value', $parameters['writer_kids'], '=')->condition('w.field_write_name_value', $parameters['writer'], '='));
	}
	else if (isset($parameters['writer'])) {
		$query->condition('w.field_write_name_value', $parameters['writer'], '=');
	}
	else if (isset($parameters['writer_kids'])){
		$query->condition('p.field_processor_name_value', $parameters['writer_kids'], '=');
	}

	$parameters['total'] = (!isset($_REQUEST['total']))? $query->countQuery()->execute()->fetchField() : $_REQUEST['total'];

// execute
	$query->limit($ITEMS_PER_PAGE);
	$results = $query->execute();
	return(show_search_results($results, $parameters, $ITEMS_PER_PAGE, $selected_terms));	
}

/*
* show_search_results:
*/
function show_search_results($results, $parameters, $items_per_page, $selected_terms)
{
	$kids_stories = "";
	$space = spaces_get_space();
	if ($space){
		if ($space->term->name == 'kids') {
			$kids_stories = "/kids";
		}
	}

	$page = (isset($_GET['page']))? $_GET['page'] : 0;
	$cnt = ($page)? $page * $items_per_page + 1 : 1;
	$last = $cnt + $results->rowCount() - 1;

	$output = "";
	if ($parameters['total'] == 0) {
		$output .= "</br>".t('no results has been found');
		return($output);
	}

	$output = "<div class='big_title'><div class='search_title'>".t('search results for')." </div>";
	for ($i=0; $i<sizeof($selected_terms); $i++) {
		$obj = taxonomy_term_load($selected_terms[$i]);
		$output .= ($i>0)? "<div class='term_separator'> | </div>" : "";
		$output .= "<div class='search_parameter'>".$obj->name."</div>";
	}
	$output .= "</div>";
	
	$output .= "<div class='search_out_of'><div class='search_out_of_text'>".t('shows')." ".t('results')."</div><div class='count_number'> $cnt"."-$last </div><div class='search_out_of_text'>".t('out of')."</div> <div class='count_number'>".$parameters['total']."</div> <div class='search_out_of_text'>".t('results')."</div></div><br />";
	$rows = array();

	foreach ($results as $item) {
		$body = short_text($item->body_value, 400);
		$id = $item->nid;
		
		$output .= "<div class='item'><div class='search_number'> $cnt)</div> <a href='$kids_stories/node/$id'>".$item->title."</a><br /><div class='item_body'>".$body."...<br /></div></div>";		
		$cnt++;
	}

	$output .= theme('pager', array('parameters' => $parameters));
	$output .= "<div class='advanced_search_link'><a href='$kids_stories/advanced_search'>".t('advanced search link')."</a></div>";
	
	return($output);
}

/* ----------------------- HELPERS --------------------------
* Get array of terms that are children of wanted parents list.
*
* Arguments: array of parent terms.
* Return: array of terms that have parent in the input array.
*/
function agada_get_term_children($parents, $default, $dict) {
	$children = array(0 => $default);
	foreach ($parents as $parent) {
		$objects = taxonomy_get_children($parent, $dict);
		foreach ($objects as $val) {
			$children[(int)$val->{'tid'}] = (string)$val->{'name'};
		}
	}
	if (count($children) <= 1) {
		return(array());
	}
	return($children);
}
/*
* 
*/
function agada_get_term_name($terms)
{
	$output = array('0' => t('all theme terms'));

	$query = db_select('taxonomy_term_data', 't');
	$query->addField('t', 'tid');
	$query->addField('t', 'name');
	$query->condition('t.tid', $terms, 'IN');
	$results = $query->execute();

	foreach ($results as $item) {
		$output[$item->tid] = $item->name; 
	}
	return($output);

}
/*
*
*/
//function get_search_results() {
//	dpm($_POST['person']);
//	return("in get_search_results");
//}

/*
* Get list of writers
*/
function get_writers($type) {

	$field_name = ($type == "kids")? "field_processor_name" : "field_write_name";
	
	$data = db_query('SELECT data FROM {field_config} WHERE field_name = :field_name', array(':field_name' => $field_name))->fetchField();
    $data = unserialize($data);
	$writers = array("0" => t('all writers')) + $data['settings']['allowed_values'];
	

	return($writers);


}
/* -----------------------------------------------
* midrash fields helpers
*/
function midrash_source_0_callback($form, &$form_state)
{
	return($form['midrash_source_1']);
}

function midrash_source_1_callback($form, $form_state)
{
	return($form['midrash_source_2']);
}

function get_midrash_source_0()
{
	$MIDRASH_DICT = 8;

	$query = db_select('taxonomy_term_data', 't');
	$query->addField('t', 'tid');
	$query->addField('t', 'name');
	$query->condition('t.vid', $MIDRASH_DICT, '=');
	$query->join('taxonomy_term_hierarchy', 'h', 'h.tid=t.tid');
	$query->condition('h.parent', 0, '=');

	$results = $query->execute()->fetchAllAssoc('tid', 'PDO::FETCH_ASSOC');

	$options = array(0 => t('all midrash sources'));
	foreach ($results as $term) {
		$options[$term['tid']] = $term['name'];
	}
	return($options);
}
//function custom_agada_field_info_alter(&$info) {
//	dpm("***********");
//
//  // Change the default widget for fields of type 'foo'.
//  if (isset($info['taxonomy_term_reference'])) {
//    $info['taxonomy_term_reference']['settings']['options_list_callback'] = 'taxonomy_allowed_values_plus_parents_check';
//  }
//}
///**
// * Returns the set of valid terms for a taxonomy field.
// *
// * @param $field
// *   The field definition.
// * @return
// *   The array of valid terms for this field, keyed by term id.
// */
//function taxonomy_allowed_values_plus_parents_check($field) {
//dpm("IN taxonomy_allowed_values_plus_parents_check");
//  $options = array();
//  foreach ($field['settings']['allowed_values'] as $tree) {
//    if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
//      if ($terms = taxonomy_get_tree($vocabulary->vid, $tree['parent'])) {
//        foreach ($terms as $term) {
//          $options[$term->tid] = str_repeat('-', $term->depth) . $term->name;
//        }
//      }
//    }
//  }
//  return $options;
//}

	


//function custom_agada_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
//if ($field['field_name'] == 'field_gada_categories'){
//  $display = $instance['display'][$view_mode];
//  $settings = $display['settings'];
//  dpm($settings);
//  }
//  }
//
//function custom_agada_wysiwyg_editor_settings_alter(&$settings, $context) {
//  if($context['profile']->editor == 'ckeditor') {
//	  dpm($settings);
//    //$settings['height'] = 100;
//  }
//}







//	  Add logout & user account links or login link.
//  if ($user->uid) {
//    $links = array(
//      'account' => array(
//        'title' => t('Hello <strong>@username</strong>', array('@username' => format_username($user))),
//        'href' => 'user',
//        'html' => TRUE,
//        'attributes' => array('title' => t('User account')),
//      ),
//      'logout' => array(
//        'title' => t('Log out'),
//        'href' => 'user/logout',
//      ),
//    );
//  }
//  else {
//     $links = array(
//      'login' => array(
//        'title' => t('Log in'),
//        'href' => 'user',
//      ),
//    );
//  }
//
//}
//
//
