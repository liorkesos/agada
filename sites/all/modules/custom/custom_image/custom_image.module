<?php
// $Id: custom_image.module,v 1.0 

/**
 * Implements hook_block_info().
 */
function custom_image_block_info() {
  $blocks['custom_image'] = array(
    'info' => t('custom_image'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function custom_image_block_view($delta = '') {
 
  $block = array();

  switch ($delta) {
    case 'custom_image':
        $block['subject'] = t('custom image');
        $block['content'] = 'custom_image custom_image';
      return $block;
	}

}

	 /**
 * Implements hook_theme().
 */
function custom_image_theme() {
  return array(
    'custom_image_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'image_style' => NULL),
    ),
  );
}



/**
 * Implements hook_field_formatter_info().
 */
function custom_image_field_formatter_info() {
  $formatters = array(
    'image_with_title_below' => array(
      'label' => t('Image with title below'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function custom_image_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function custom_image_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function custom_image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	error_log("custom_image_field_formatter_view");
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'custom_image_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['image_style'],
      '#path' => isset($uri) ? $uri : '',
    );
  }

  return $element;
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 */
function theme_custom_image_formatter($variables) {
error_log("****custom_image_formatter");
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );

  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }

  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
    $output = theme('image_style', $image);
  }
  else {
    $output = theme('image', $image);
  }

  if (!empty($variables['path']['path'])) {
    $path = $variables['path']['path'];
    $options = $variables['path']['options'];
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }


  $title_below = (isset($image["title"])) ?  "<span class='node_pic_title'>".$image["title"] ." </span>" : ""; 

  return $output.$title_below;
}


///**
// * Implements hook_wysiwyg_plugin().
// */
//function wysiwyg_code_button_wysiwyg_plugin($editor, $version) {
//  switch ($editor) {
//    case 'ckeditor':
//      // Add CSS for the button.
//      drupal_add_css(drupal_get_path('module', 'wysiwyg_code_button') .'/ckeditor/wysiwyg_code_editor_ckeditor.css');
//      return array(
//        'code-button' => array(
//          'url' => 'http://drupal.org/project/wysiwyg_code_button',
//          'path' => drupal_get_path('module', 'wysiwyg_code_button') . '/ckeditor/plugin.js',
//          'buttons' => array(
//            'code-button' => t('Preformatted code'),
//          ),
//          'load' => TRUE,
//        ),
//      );
//      break;
//  }
//}


//function custom_image_wysiwyg_plugin($editor, $version) {
//  switch ($editor) {
//    case 'ckeditor':
//        return array(
//          'code-button' => array(
//            'url' => 'http://......',
//            'path' => drupal_get_path('module', 'custom_image') . '/ckeditor/code-button/plugin.js',
// //           'filename' => 'plugin.js',
//            'buttons' => array(
//              'code-button' => t('Preformatted code'),
//            ),
//            // A list of global, native editor configuration settings to
//            // override. To be used rarely and only when required.
////            'options' => array(
////              'startupOutlineBlocks' => TRUE,
////            ),
//            'load' => TRUE,
////            'internal' => FALSE,
//          ),
//        );
//      break;
//  }
//}

function custom_image_wysiwyg_plugin($editor, $version) {
  switch ($editor) {
    case 'ckeditor':
        return array(
          'code-button' => array(
            'url' => 'http://......',
            'path' => drupal_get_path('module', 'custom_image') . '/ckeditor/code-button',
            'buttons' => array(
              'code-button' => t('add explaintation'),
            ),
            'load' => TRUE,
          ),
	       'source-button' => array(
            'url' => 'http://......',
            'path' => drupal_get_path('module', 'custom_image') . '/ckeditor/source-button',
            'buttons' => array(
              'source-button' => t('add source'),
            ),
            'load' => TRUE,
          ),

        );
      break;
  }
}

//	CKEDITOR.stylesSet.add( 'my_styles',
//[
//    // Block-level styles
//    { name : 'Blue Title', element : 'h2', styles : { 'color' : 'Blue' } },
//    { name : 'Red Title' , element : 'h3', styles : { 'color' : 'Red' } },
// 
//    // Inline styles
//    { name : 'CSS Style', element : 'span', attributes : { 'class' : 'my_style' } },
//    { name : 'Marker: Yellow', element : 'span', styles : { 'background-color' : 'Yellow' } }
//]);